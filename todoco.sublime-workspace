{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"resto",
				"restoreGlobal〔function〕"
			],
			[
				"write",
				"writeGlobalJson"
			],
			[
				"pathtogl",
				"pathToGlobalBackup〔variable〕"
			],
			[
				"path",
				"pathToGlobalBackup〔variable〕"
			],
			[
				"pathT",
				"pathtoGlobal〔variable〕"
			],
			[
				"exis",
				"fs.existsSync(path);"
			],
			[
				"compi",
				"compileGlobalTemplate〔function〕"
			]
		]
	},
	"buffers":
	[
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 13,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 35 files for \"console.log\"\n\n/Users/janmeischner/Projects/todoco/src/config/config.js:\n   38          return Rx.Observable.fromPromise(globby(_.concat('**', toIgnore, toAdd), {nodir: true}))\n   39          .map(paths => {\n   40:             console.log(paths)\n   41              return ig.filter(paths);\n   42          });\n   ..\n   62  \n   63          globby(_.concat([ '**' ] ), {nodir: true, dot: true, nocase:true}).then(files => {\n   64:             console.log(files);\n   65          })\n   66          return Rx.Observable.fromPromise(globby(_.concat(ignoreEntries, addEntries), {\n\n/Users/janmeischner/Projects/todoco/src/logging/list-options.js:\n   30  function readTodosFromFiles(files){\n   31      clear();\n   32:     console.log('-'.repeat(80).blue);\n   33      let nrOfFiles = 0;\n   34      let nrOfTodos = 0;\n   ..\n   46              } else {\n   47                  let todoString = nrOfTodos === 1 ? 'ToDo' : 'ToDos';\n   48:                 console.log('-'.repeat(80).blue);\n   49:                 console.log(_.padStart('Found ' + nrOfTodos + ' ' + todoString + ' in ' + nrOfFiles + ' files.', 77).green);\n   50              }\n   51              fulfill();\n\n/Users/janmeischner/Projects/todoco/src/logging/list-todos.js:\n    7      let filename = path.basename(file.file);\n    8      let filepath = path.dirname(file.file);\n    9:     console.log(_.padEnd(\" \" + filename.yellow.underline, 50) + _.padStart('(' + filepath + ')', 30).yellow.dim.italic);\n   10      _.forEach(file.todos, todo => {\n   11:         console.log(_.padStart(todo.line, 4).green + _.padEnd(\":\", 3) + stringHelper.buildMultilineTodoText(todo.text, 73, 7));\n   12      });\n   13:     console.log(\"\");\n   14  }\n   15  \n\n/Users/janmeischner/Projects/todoco/src/logging/log.js:\n    9          error = errorCode.bold.red + \": \".cyan + message.red.bold;\n   10      }\n   11:     console.log(error);\n   12  \n   13      return null;\n   ..\n   17      const infoCode = \"[\" + code + \"]\";\n   18      let info = infoCode.green + \": \".cyan + message.green;\n   19:     console.log(info);\n   20  \n   21      return null;\n\n/Users/janmeischner/Projects/todoco/test/logging/list-todosSpec.js:\n   15          list.toConsole(file);\n   16  \n   17:         expect(console.log).toHaveBeenCalledWith(' file.js                                                               (path/to)');\n   18:         expect(console.log).toHaveBeenCalledWith('   1:  This is a simple Todo');\n   19:         expect(console.log).toHaveBeenCalledWith('');\n   20      });\n   21  });\n\n/Users/janmeischner/Projects/todoco/test/logging/logSpec.js:\n    5          spyOn(console, 'log');\n    6          log.error('Code', 'An Error');\n    7:         expect(console.log).toHaveBeenCalledWith('[Code]: An Error');\n    8      });\n    9  \n   ..\n   11          spyOn(console, 'log');\n   12          log.error('Code', 'An Error', 'With Details');\n   13:         expect(console.log).toHaveBeenCalledWith('[Code]: An Error\\nDetails: With Details');\n   14      });\n   15  });\n\n15 matches across 6 files\n\n\nSearching 35 files for \"listTodosForGivenPath(\"\n\n/Users/janmeischner/Projects/todoco/src/logging/list-options.js:\n    9  const _ = require('lodash');\n   10  \n   11: function listTodosForGivenPath(files) {\n   12  \n   13      const allFilesInPath = {\n\n1 match in 1 file\n\n\nSearching 35 files for \"inDir\"\n\n/Users/janmeischner/Projects/todoco/todoco-list.js:\n    7  \n    8  if (program.args) {\n    9:     list.inDir(program.args);\n   10  } else {\n   11      list.fromConfig();\n\n/Users/janmeischner/Projects/todoco/src/logging/list-options.js:\n   56  \n   57  module.exports = {\n   58:     inDir: listTodosForGivenPath,\n   59      fromConfig: listTodosFromConfig,\n   60  };\n\n/Users/janmeischner/Projects/todoco/test/logging/list-optionsSpec.js:\n    5      it('should should list todos specific dir without having a config file', (done) => {\n    6          spyOn(listTodos, 'toConsole');\n    7:         listOptions.inDir('test/logging/test-files/').then(() => {\n    8              // Todo: Bessere Erwartungen formulieren\n    9              expect(listTodos.toConsole).toHaveBeenCalled();\n\n3 matches across 3 files\n\n\nSearching 35 files for \"console.log\"\n\n/Users/janmeischner/Projects/todoco/src/config/config.js:\n   61  \n   62          globby(_.concat([ '**' ] ), {nodir: true, dot: true, nocase:true}).then(files => {\n   63:             console.log(files);\n   64          })\n   65          return Rx.Observable.fromPromise(globby(_.concat(ignoreEntries, addEntries), {\n\n/Users/janmeischner/Projects/todoco/src/logging/list-options.js:\n   30  function readTodosFromFiles(files){\n   31      clear();\n   32:     console.log('-'.repeat(80).blue);\n   33      let nrOfFiles = 0;\n   34      let nrOfTodos = 0;\n   ..\n   46              } else {\n   47                  let todoString = nrOfTodos === 1 ? 'ToDo' : 'ToDos';\n   48:                 console.log('-'.repeat(80).blue);\n   49:                 console.log(_.padStart('Found ' + nrOfTodos + ' ' + todoString + ' in ' + nrOfFiles + ' files.', 77).green);\n   50              }\n   51              fulfill();\n\n/Users/janmeischner/Projects/todoco/src/logging/list-todos.js:\n    7      let filename = path.basename(file.file);\n    8      let filepath = path.dirname(file.file);\n    9:     console.log(_.padEnd(\" \" + filename.yellow.underline, 50) + _.padStart('(' + filepath + ')', 30).yellow.dim.italic);\n   10      _.forEach(file.todos, todo => {\n   11:         console.log(_.padStart(todo.line, 4).green + _.padEnd(\":\", 3) + stringHelper.buildMultilineTodoText(todo.text, 73, 7));\n   12      });\n   13:     console.log(\"\");\n   14  }\n   15  \n\n/Users/janmeischner/Projects/todoco/src/logging/log.js:\n    9          error = errorCode.bold.red + \": \".cyan + message.red.bold;\n   10      }\n   11:     console.log(error);\n   12  \n   13      return null;\n   ..\n   17      const infoCode = \"[\" + code + \"]\";\n   18      let info = infoCode.green + \": \".cyan + message.green;\n   19:     console.log(info);\n   20  \n   21      return null;\n\n/Users/janmeischner/Projects/todoco/test/logging/list-todosSpec.js:\n   15          list.toConsole(file);\n   16  \n   17:         expect(console.log).toHaveBeenCalledWith(' file.js                                                               (path/to)');\n   18:         expect(console.log).toHaveBeenCalledWith('   1:  This is a simple Todo');\n   19:         expect(console.log).toHaveBeenCalledWith('');\n   20      });\n   21  });\n\n/Users/janmeischner/Projects/todoco/test/logging/logSpec.js:\n    5          spyOn(console, 'log');\n    6          log.error('Code', 'An Error');\n    7:         expect(console.log).toHaveBeenCalledWith('[Code]: An Error');\n    8      });\n    9  \n   ..\n   11          spyOn(console, 'log');\n   12          log.error('Code', 'An Error', 'With Details');\n   13:         expect(console.log).toHaveBeenCalledWith('[Code]: An Error\\nDetails: With Details');\n   14      });\n   15  });\n\n14 matches across 6 files\n",
			"settings":
			{
				"buffer_size": 6939,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/config/config.js",
			"settings":
			{
				"buffer_size": 2824,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nGitGutter\n---------\n\n  1.7.5:\n  ------\n  \n     A N N O U N C E M E N T\n  \n    In manner of consistency all functions are now available via\n  \n     * command pallet\n     * main menu\n     * key bindings\n  \n    The command pallet is probably the best and most quickly available cheat\n    sheet for key bindings which is the reason to add all commands there.\n  \n    The following main menu entries are available:\n  \n       Edit\n        +- Revert Change to Commit             (ctrl+shift+alt+z)\n        +- Copy Content from Commit            (ctrl+shift+c)\n  \n       View\n        +- GitGutter\n           +- Enable\n           +- Show Diff Popup                  (ctrl+shift+alt+c, ctrl+d)\n           +- ...\n  \n       Goto\n        +- Goto Previous Git Difference        (ctrl+shift+alt+k)\n        +- Goto Next Git Difference            (ctrl+shift+alt+j)\n  \n       Preferences\n        +- Package Settings\n           +- GitGutter\n              +- ...\n  \n    ---------------------------------------------------------------------------\n  \n     N O T E\n  \n    The command \"GitGutter: Enable/Disable\" was added to provide the opportunity\n    to disable GitGutter for single views.\n  \n    As this command uses ST's \"toggle_setting\" the setting \"enable\"\n    in GitGutter.sublime-settings moved to Preferences.sublime-settings.\n  \n    If you need to disable GitGutter globally, you'll need to do that by adding\n  \n       \"git_gutter_enable\": false\n  \n    to the Preferences.sublime-settings. \n  \n    This setting works in Project settings as well.\n  \n    ---------------------------------------------------------------------------\n  \n     C H A N G E L O G\n  \n    Enhancement:\n     - Add a text command with key binding to revert changes\n     - Add a text command with key binding to copy content from commit\n     - Add main menu entry/command pallet entry/key binding for all commands\n     - Toggle GitGutter via main menu and command pallet\n     - Flatten the 'Compare against' main menu structure\n  \n    Fix:\n     - Compare against Origin uses @{upstream} (Issue #371)\n     - Compare against… panels don't show immediately. (#446)\n  \n    README:\n     - Update Compare against paragraph\n     - Add Goto/Copy/Revert Change\n  \n  \n  💛 Git Gutter? Want to support development?\n  \n  I've teamed up with Wes Bos to offer the following discounts:\n  \n  +------------------------------------------------+\n  |                                                |\n  |   Use the coupon code GITGUTTER for $10 off    |\n  |                                                |\n  +------------------------------------------------+\n  \n  🏅 ⭐ ES6 ⭐\n  \n  👉 ES6.io/friend/GITGUTTER\n  \n  🏅 ⭐ Sublime Text Book ⭐\n  \n  👉 SublimeTextBook.com/friend/GITGUTTER\n  \n  🏅 ⭐ React For Beginners ⭐\n  \n  👉 ReactForBeginners.com/friend/GITGUTTER\n  \n  \n  Join 15,000 other developers already learning with Wes Bos.\n  \n  These are fantastic resources - 100% money back guarantee! 🌟\n",
			"settings":
			{
				"buffer_size": 2976,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "test/logging/list-optionsSpec.js",
			"settings":
			{
				"buffer_size": 825,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "todoco-list.js",
			"settings":
			{
				"buffer_size": 245,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/logging/list-options.js",
			"settings":
			{
				"buffer_size": 1721,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 357.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"walj",
				"Wallaby.js: Jump to error source"
			],
			[
				"wall ser",
				"Wallaby.js: Show Uncovered Regions"
			],
			[
				"wall",
				"Wallaby.js: Start"
			],
			[
				"json val",
				"Pretty JSON: Validate"
			],
			[
				"json in",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"inden",
				"Indentation: Reindent Lines"
			],
			[
				"pret",
				"Pretty JSON: Validate"
			],
			[
				"set sy xq",
				"Set Syntax: XQuery"
			],
			[
				"syjso",
				"Set Syntax: JSON"
			],
			[
				"set sy bas",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"html",
				"HTMLPrettify"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"wal ",
				"Wallaby.js: Toggle Tests View"
			],
			[
				"was",
				"Wallaby.js: Start"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"set sy ba",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"pack",
				"Install Package Control"
			],
			[
				"togl st",
				"View: Toggle Status Bar"
			]
		],
		"width": 558.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/janmeischner/Projects/todoco",
		"/Users/janmeischner/Projects/todoco/src",
		"/Users/janmeischner/Projects/todoco/src/config",
		"/Users/janmeischner/Projects/todoco/src/logging",
		"/Users/janmeischner/Projects/todoco/test",
		"/Users/janmeischner/Projects/todoco/test/logging",
		"/Users/janmeischner/Projects/todoco/test/logging/test-files"
	],
	"file_history":
	[
		"/Users/janmeischner/Projects/adesso/influx-cli/.git/COMMIT_EDITMSG",
		"/Users/janmeischner/Projects/adesso/influx-cli/features/influx-global/global.json",
		"/Users/janmeischner/Projects/adesso/influx-cli/features/config/config.js",
		"/Users/janmeischner/Projects/adesso/influx-cli/features/config/config.json",
		"/Users/janmeischner/Projects/adesso/influx-cli/.gitignore",
		"/Users/janmeischner/Projects/adesso/influx-cli/features/influx-global/global.template",
		"/Users/janmeischner/Projects/adesso/influx/.git/COMMIT_EDITMSG",
		"/Users/janmeischner/Projects/adesso/influx/base/influx-web/repo/influx/global.xqm",
		"/Users/janmeischner/Projects/adesso/influx/base/influx-web/repo/influx/modules.xqm",
		"/Users/janmeischner/.dotfiles/system/path.zsh",
		"/Users/janmeischner/.dotfiles/java/path.zsh",
		"/etc/hosts",
		"/Users/janmeischner/.dotfiles/.git/COMMIT_EDITMSG",
		"/Users/janmeischner/.dotfiles/zsh/zshrc.symlink",
		"/Users/janmeischner/.oh-my-zsh/oh-my-zsh.sh",
		"/Volumes/home/für Paula LIDL/Contents/Resources/sync/webapp/scripts/Intl.js",
		"/Volumes/home/für Paula LIDL/Contents/Resources/sync/webapp/scripts/partials.js",
		"/Users/janmeischner/.dotfiles/Brewfile",
		"/Users/janmeischner/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 132.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"console.log",
			"inDir",
			"listTodosForGivenPath(",
			"console.log"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13,
						"regions":
						{
						},
						"selection":
						[
							[
								13,
								13
							]
						],
						"settings":
						{
							"at_wb_tests_view": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Sunrise Theme/Langs/Git.tmLanguage",
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6939,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										250,
										261
									],
									[
										463,
										474
									],
									[
										735,
										746
									],
									[
										962,
										973
									],
									[
										1019,
										1030
									],
									[
										1357,
										1368
									],
									[
										1532,
										1543
									],
									[
										1678,
										1689
									],
									[
										1867,
										1878
									],
									[
										2048,
										2059
									],
									[
										2235,
										2246
									],
									[
										2376,
										2387
									],
									[
										2465,
										2476
									],
									[
										2698,
										2709
									],
									[
										2904,
										2915
									],
									[
										3211,
										3233
									],
									[
										3442,
										3447
									],
									[
										3620,
										3625
									],
									[
										3944,
										3949
									],
									[
										4367,
										4378
									],
									[
										4639,
										4650
									],
									[
										4866,
										4877
									],
									[
										4923,
										4934
									],
									[
										5261,
										5272
									],
									[
										5436,
										5447
									],
									[
										5582,
										5593
									],
									[
										5771,
										5782
									],
									[
										5952,
										5963
									],
									[
										6139,
										6150
									],
									[
										6280,
										6291
									],
									[
										6369,
										6380
									],
									[
										6602,
										6613
									],
									[
										6808,
										6819
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								4372,
								4372
							]
						],
						"settings":
						{
							"at_wb_tests_view": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4402,
										4403
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										4346,
										4347
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"default_dir": "/Users/janmeischner/Projects/todoco",
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2070.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/config/config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2824,
						"regions":
						{
						},
						"selection":
						[
							[
								1525,
								1525
							]
						],
						"settings":
						{
							"at_wb_tests_view": false,
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1525,
										1526
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1522,
										1523
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 447.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2976,
						"regions":
						{
						},
						"selection":
						[
							[
								2976,
								2976
							]
						],
						"settings":
						{
							"at_wb_tests_view": false,
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test/logging/list-optionsSpec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 825,
						"regions":
						{
						},
						"selection":
						[
							[
								349,
								349
							]
						],
						"settings":
						{
							"at_wb_tests_view": false,
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										349,
										350
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										311,
										312
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "todoco-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 245,
						"regions":
						{
						},
						"selection":
						[
							[
								147,
								147
							]
						],
						"settings":
						{
							"at_wb_tests_view": false,
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/logging/list-options.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1721,
						"regions":
						{
						},
						"selection":
						[
							[
								561,
								561
							]
						],
						"settings":
						{
							"at_wb_tests_view": false,
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.wallabyjs":
	{
		"height": 0.0
	},
	"output.wallabyjs_console":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "todoco.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 320.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
